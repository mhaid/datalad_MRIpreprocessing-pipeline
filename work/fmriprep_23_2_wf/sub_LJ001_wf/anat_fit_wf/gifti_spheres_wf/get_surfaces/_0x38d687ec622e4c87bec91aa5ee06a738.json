[
    [
        "function_str",
        "def _get_surfaces(subjects_dir: str, subject_id: str, surfaces: list[str]) -> tuple[list[str]]:\n    \"\"\"\n    Get a list of FreeSurfer surface files for a given subject.\n\n    If ``midthickness`` is requested but not present in the directory,\n    ``graymid`` will be returned instead. For surfaces with dots (``.``) in\n    their names, pass the name with underscores (``_``).\n\n    Parameters\n    ----------\n    subjects_dir\n        FreeSurfer SUBJECTS_DIR\n    subject_id\n        FreeSurfer subject ID\n    surfaces\n        List of surfaces to fetch\n\n    Returns\n    -------\n    tuple\n        A list of surfaces for each requested surface, sorted\n\n    \"\"\"\n    from pathlib import Path\n\n    expanded_surfaces = surfaces.copy()\n    if \"midthickness\" in surfaces:\n        expanded_surfaces.append(\"graymid\")\n\n    surf_dir = Path(subjects_dir) / subject_id / \"surf\"\n    all_surfs = {\n        surface: sorted(\n            str(fn)\n            for fn in surf_dir.glob(f\"[lr]h.{surface.replace('_', '.')}\")\n        )\n        for surface in expanded_surfaces\n    }\n\n    if all_surfs.get(\"graymid\") and not all_surfs.get(\"midthickness\"):\n        all_surfs[\"midthickness\"] = all_surfs.pop(\"graymid\")\n\n    ret = tuple(all_surfs[surface] for surface in surfaces)\n    return ret if len(ret) > 1 else ret[0]\n"
    ],
    [
        "subject_id",
        "sub-LJ001"
    ],
    [
        "subjects_dir",
        "/tmp/sourcedata/freesurfer"
    ],
    [
        "surfaces",
        [
            "sphere_reg",
            "sphere"
        ]
    ],
    [
        "needed_outputs",
        [
            "sphere",
            "sphere_reg"
        ]
    ]
]