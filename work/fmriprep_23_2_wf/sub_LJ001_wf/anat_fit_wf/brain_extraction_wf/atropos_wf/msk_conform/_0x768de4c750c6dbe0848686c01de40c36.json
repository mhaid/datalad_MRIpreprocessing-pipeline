[
    [
        "function_str",
        "def _conform_mask(in_mask, in_reference):\n    \"\"\"Ensures the mask headers make sense and match those of the T1w\"\"\"\n    from pathlib import Path\n    import numpy as np\n    import nibabel as nb\n    from nipype.utils.filemanip import fname_presuffix\n\n    ref = nb.load(in_reference)\n    nii = nb.load(in_mask)\n    hdr = nii.header.copy()\n    hdr.set_data_dtype(\"int16\")\n    hdr.set_slope_inter(1, 0)\n\n    qform, qcode = ref.header.get_qform(coded=True)\n    if qcode is not None:\n        hdr.set_qform(qform, int(qcode))\n\n    sform, scode = ref.header.get_sform(coded=True)\n    if scode is not None:\n        hdr.set_sform(sform, int(scode))\n\n    if \"_maths\" in in_mask:  # Cut the name at first _maths occurrence\n        ext = \"\".join(Path(in_mask).suffixes)\n        basename = Path(in_mask).name\n        in_mask = basename.split(\"_maths\")[0] + ext\n\n    out_file = fname_presuffix(in_mask, suffix=\"_mask\", newpath=str(Path()))\n    nii.__class__(\n        np.asanyarray(nii.dataobj).astype(\"int16\"), ref.affine, hdr\n    ).to_filename(out_file)\n    return out_file\n"
    ],
    [
        "in_mask",
        [
            "/tmp/work/fmriprep_23_2_wf/sub_LJ001_wf/anat_fit_wf/brain_extraction_wf/atropos_wf/23_depad_mask/09_relabel_wm_maths_class-03_maths_maths_maths_maths_maths_maths_maths_maths_maths.nii.gz",
            "da9756c690d6e3dfa0403a8a39c68ebd"
        ]
    ],
    [
        "in_reference",
        [
            "/tmp/work/fmriprep_23_2_wf/sub_LJ001_wf/anat_fit_wf/anat_template_wf/denoise/mapflow/_denoise0/sub-LJ001_ses-LJ001MR1_acq-mprage_T1w_noise_corrected.nii.gz",
            "05f0f698187fb53726cc683c580e3a22"
        ]
    ],
    [
        "needed_outputs",
        [
            "out"
        ]
    ]
]